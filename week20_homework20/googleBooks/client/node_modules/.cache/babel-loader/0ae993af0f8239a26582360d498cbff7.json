{"ast":null,"code":"import _objectSpread from \"/Users/patricktomas/Desktop/homeworks/week20_homework20/week20_homework20/googleBooks/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/Users/patricktomas/Desktop/homeworks/week20_homework20/week20_homework20/googleBooks/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/patricktomas/Desktop/homeworks/week20_homework20/week20_homework20/googleBooks/client/src/pages/Books.js\";\nimport React, { useState, useEffect } from \"react\";\nimport DeleteBtn from \"../components/DeleteBtn\";\nimport Jumbotron from \"../components/Jumbotron\";\nimport TitleBook from \"../components/TitleBook\";\nimport API from \"../utils/API\";\nimport { Link, useParams } from \"react-router-dom\";\nimport { Col, Row, Container } from \"../components/Grid\";\nimport { List, ListItem } from \"../components/List\";\nimport { Input, TextArea, FormBtn } from \"../components/Form\";\n\nfunction Books() {\n  // Setting our component's initial state\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        books = _useState2[0],\n        setBooks = _useState2[1];\n\n  const _useState3 = useState({}),\n        _useState4 = _slicedToArray(_useState3, 2),\n        formObject = _useState4[0],\n        setFormObject = _useState4[1];\n\n  const _useParams = useParams(),\n        id = _useParams.id; // Load all books and store them with setBooks\n\n\n  useEffect(() => {\n    loadBooks();\n  }, []); // Loads all books and sets them to books\n\n  function loadBooks() {\n    API.getBooks().then(res => setBooks(res.data)).catch(err => console.log(err));\n  }\n\n  ; // Deletes a book from the database with a given id, then reloads books from the db\n\n  function deleteBook(id) {\n    API.deleteBook(id).then(res => loadBooks()).catch(err => console.log(err));\n  }\n\n  const getInfo = setBooks => {\n    API.getBooks(setBooks).then(({\n      data\n    }) => {\n      setBooks({\n        results: data.data // MusicGraph returns an object named data, \n        // as does axios. So... data.data                             \n\n      });\n    });\n  };\n\n  const updateState = value => {\n    setBooks({\n      query: value\n    }, getInfo);\n  }; // Handles updating component state when the user types into the input field\n\n\n  function handleInputChange(event) {\n    const _event$target = event.target,\n          name = _event$target.name,\n          value = _event$target.value;\n    setFormObject(_objectSpread(_objectSpread({}, formObject), {}, {\n      [name]: value\n    }));\n    console.log(\"event.target.name: \", event.target.value); // API.getBook(value)\n    // .then(this.state = name)\n    // setBooks({\n    //   query: value\n    // }, () => {\n    //   if (setBooks.query && setBooks.query.length > 1) {\n    //     if (setBooks.query.length % 2 === 0) {\n    //       this.getInfo()\n    //     }\n    //   } \n    // })\n\n    updateState();\n    console.log(setBooks);\n  }\n\n  ; // When the form is submitted, use the API.saveBook method to save the book data\n  // Then reload books from the database\n\n  function handleFormSubmit(event) {\n    event.preventDefault();\n\n    if (formObject.title && formObject.author) {\n      API.saveBook({\n        title: formObject.title,\n        author: formObject.author,\n        synopsis: formObject.synopsis\n      }).then(res => loadBooks()).catch(err => console.log(err));\n    }\n  }\n\n  ;\n  return /*#__PURE__*/React.createElement(Container, {\n    fluid: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    size: \"md-6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Jumbotron, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 15\n    }\n  }, \"What Books Should I Read?\")), /*#__PURE__*/React.createElement(\"form\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    onChange: handleInputChange,\n    name: \"title\",\n    placeholder: \"Title (required)\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(FormBtn, {\n    disabled: !(formObject.author && formObject.title),\n    onClick: handleFormSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 15\n    }\n  }, \"Submit Book\"))), /*#__PURE__*/React.createElement(Col, {\n    size: \"md-6 sm-12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Jumbotron, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 15\n    }\n  }, \"Books On My List\")), books.length ? /*#__PURE__*/React.createElement(List, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 15\n    }\n  }, books.map(book => /*#__PURE__*/React.createElement(ListItem, {\n    key: book._id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(Link, {\n    to: \"/books/\" + book._id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 23\n    }\n  }, book.title, \" by \", book.author)), /*#__PURE__*/React.createElement(DeleteBtn, {\n    onClick: () => deleteBook(book._id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 21\n    }\n  })))) : /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 15\n    }\n  }, \"No Results to Display\"))));\n}\n\nexport default Books;","map":{"version":3,"sources":["/Users/patricktomas/Desktop/homeworks/week20_homework20/week20_homework20/googleBooks/client/src/pages/Books.js"],"names":["React","useState","useEffect","DeleteBtn","Jumbotron","TitleBook","API","Link","useParams","Col","Row","Container","List","ListItem","Input","TextArea","FormBtn","Books","books","setBooks","formObject","setFormObject","id","loadBooks","getBooks","then","res","data","catch","err","console","log","deleteBook","getInfo","results","updateState","value","query","handleInputChange","event","target","name","handleFormSubmit","preventDefault","title","author","saveBook","synopsis","length","map","book","_id"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport DeleteBtn from \"../components/DeleteBtn\";\nimport Jumbotron from \"../components/Jumbotron\";\nimport TitleBook from \"../components/TitleBook\";\nimport API from \"../utils/API\";\nimport { Link, useParams } from \"react-router-dom\";\nimport { Col, Row, Container } from \"../components/Grid\";\nimport { List, ListItem } from \"../components/List\";\nimport { Input, TextArea, FormBtn } from \"../components/Form\";\n\n\nfunction Books() {\n  // Setting our component's initial state\n  const [books, setBooks] = useState([])\n  const [formObject, setFormObject] = useState({})\n  const {id} = useParams()\n\n  // Load all books and store them with setBooks\n  useEffect(() => {\n    loadBooks()\n  }, [])\n\n  // Loads all books and sets them to books\n  function loadBooks() {\n    API.getBooks()\n      .then(res => \n        setBooks(res.data)\n      )\n      .catch(err => console.log(err));\n  };\n\n  // Deletes a book from the database with a given id, then reloads books from the db\n  function deleteBook(id) {\n    API.deleteBook(id)\n      .then(res => loadBooks())\n      .catch(err => console.log(err));\n  }\n\n  const getInfo = (setBooks) => {\n    API.getBooks(setBooks)\n    .then(({ data }) => {\n      setBooks({\n        results: data.data // MusicGraph returns an object named data, \n                           // as does axios. So... data.data                             \n      })\n    })\n  }\n  const updateState = (value) => {\n    setBooks({ query: value}, getInfo);\n  };\n  // Handles updating component state when the user types into the input field\n  function handleInputChange(event) {\n    const { name, value } = event.target;\n    setFormObject({...formObject, [name]: value})\n\n    console.log(\"event.target.name: \", event.target.value)\n      // API.getBook(value)\n      // .then(this.state = name)\n    \n      // setBooks({\n      //   query: value\n      // }, () => {\n      //   if (setBooks.query && setBooks.query.length > 1) {\n      //     if (setBooks.query.length % 2 === 0) {\n      //       this.getInfo()\n      //     }\n      //   } \n      // })\n    updateState()\n    console.log(setBooks)\n  };\n\n  // When the form is submitted, use the API.saveBook method to save the book data\n  // Then reload books from the database\n  function handleFormSubmit(event) {\n    event.preventDefault();\n    if (formObject.title && formObject.author) {\n      API.saveBook({\n        title: formObject.title,\n        author: formObject.author,\n        synopsis: formObject.synopsis\n      })\n        .then(res => loadBooks())\n        .catch(err => console.log(err));\n    }\n  };\n\n    return (\n      <Container fluid>\n        <Row>\n          <Col size=\"md-6\">\n            <Jumbotron>\n              <h1>What Books Should I Read?</h1>\n            </Jumbotron>\n            <form>\n              <Input\n                onChange={handleInputChange}\n                name=\"title\"\n                placeholder=\"Title (required)\"\n              />\n\n              {/* {this.state.result.title ? (\n                <TitleBook\n                title={this.state.result.title}\n                src={this.state.result.image}\n                author={this.state.result.author}\n                description={this.state.result.description}\n                link={this.state.result.link}\n                />\n\n              ) : (\n                <h3>No Results to Display</h3>\n              )} */}\n              <FormBtn\n                disabled={!(formObject.author && formObject.title)}\n                onClick={handleFormSubmit}\n              >\n                Submit Book\n              </FormBtn>\n            </form>\n          </Col>\n          <Col size=\"md-6 sm-12\">\n            <Jumbotron>\n              <h1>Books On My List</h1>\n            </Jumbotron>\n            {books.length ? (\n              <List>\n                {books.map(book => (\n                  <ListItem key={book._id}>\n                    <Link to={\"/books/\" + book._id}>\n                      <strong>\n                        {book.title} by {book.author}\n                      </strong>\n                    </Link>\n                    <DeleteBtn onClick={() => deleteBook(book._id)} />\n                  </ListItem>\n                ))}\n              </List>\n            ) : (\n              <h3>No Results to Display</h3>\n            )}\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n\n\nexport default Books;\n"]},"metadata":{},"sourceType":"module"}